version: '3.8'


services:
  # Serviço do banco de dados PostgreSQL (Renamed to 'db')
  db: # Renamed from 'postgres'
    image: postgres:15 # Using version 14 as in original, can be updated to 15 if preferred
    container_name: simple-db # Renamed container
    env_file:
      - ./.env.local
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${SPRING_DATASOURCE_USERNAME}
      POSTGRES_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
    ports:
      - "9433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      # These scripts will initialize the monolith's database.
      # Microservices will manage their own schemas via 'ddl-auto: update'.
      - ./database/schema.sql:/docker-entrypoint-initdb.d/10_schema.sql
      - ./database/sample_data.sql:/docker-entrypoint-initdb.d/20_sample_data.sql
    networks:
      - simple-network
    restart: unless-stopped

  # Serviço do backend Spring Boot (Monolith)
  #backend:
  # build:
  #    context: .
  #    dockerfile: backend/Dockerfile
  #  container_name: simple-backend
  #  depends_on:
  #    - db # Updated dependency
  #  environment:
  #    SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/simple_monolith # Updated URL and DB name
  #    SPRING_DATASOURCE_USERNAME: postgres # Updated username
  #    SPRING_DATASOURCE_PASSWORD: postgres # Updated password
  #    SPRING_JPA_HIBERNATE_DDL_AUTO: none # Monolith uses init scripts
  #  ports:
  #    - "9081:8080" # Changed from 8081 to 9081
  #  networks:
  #    - simple-network
  #  restart: unless-stopped

  # API Gateway Service
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: simple-api-gateway
    env_file:
      - ./.env.local
    ports:
      - "9080:8080"
    networks:
      - simple-network
    restart: unless-stopped
    environment:
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    depends_on:
      - auth-service
      - citizen-service
      - order-service
      - config-service
      - favorites-service

  # Authentication Service
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: simple-auth-service
    env_file:
      - ./.env.local
    ports:
      - "9081:8081"
   # environment:
   #   SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
   #   SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
   #   SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
   #   JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    depends_on:
      - db
    networks:
      - simple-network
    restart: unless-stopped

  # Citizen Service
  citizen-service:
    build:
      context: ./citizen-service
      dockerfile: Dockerfile
    container_name: simple-citizen-service
    env_file:
      - ./.env.local
    ports:
      - "9082:8082" # Container port is 8082
    #environment:
    #  SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
    #  SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
    #  SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
    depends_on:
      - db
    networks:
      - simple-network
    restart: unless-stopped

  # Order Service
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: simple-order-service
    env_file:
      - ./.env.local
    ports:
      - "9083:8083" # Container port is 8083
    #environment:
    #  SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
    #  SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
    #  SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
    #  AUTH_SERVICE_URL: http://auth-service:9081 # This stays the same as it's the internal container port
    #  CITIZEN_SERVICE_URL: http://citizen-service:9082
    #  CONFIG_SERVICE_URL: http://config-service:9084
    #  JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    depends_on:
      - db
      - auth-service
      - citizen-service
      - config-service
    networks:
      - simple-network
    restart: unless-stopped

  # Configuration Service
  config-service:
    build:
      context: ./config-service
      dockerfile: Dockerfile
    container_name: simple-config-service
    env_file:
      - ./.env.local
    ports:
      - "9084:8084" # Container port is 8084
    #environment:
    #  SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
    #  SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
    #  SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
    depends_on:
      - db
    networks:
      - simple-network
    restart: unless-stopped

  # Favorites Service
  favorites-service:
    build:
      context: ./favorites-service
      dockerfile: Dockerfile
    container_name: simple-favorites-service
    env_file:
      - ./.env.local
    ports:
      - "9085:8085" # Container port is 8085
    #environment:
      #SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      #SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      #SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      #CONFIG_SERVICE_URL: http://config-service:9084
      #JWT_SECRET_KEY: ${JWT_SECRET_KEY} # Matches service name
    depends_on:
      - db
      - config-service
    networks:
      - simple-network
    restart: unless-stopped

  # Serviço do frontend Next.js (No changes needed here based on instructions for this subtask)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: simple-frontend
    env_file:
      - ./.env.local
    depends_on: # Frontend now depends on api-gateway, not directly on backend
      - api-gateway 
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:9080 # Updated to point to new api-gateway port
    ports:
      - "9000:3000"
    networks:
      - simple-network
    restart: unless-stopped

# Volumes para persistência de dados
volumes:
  postgres-data: # Name of the volume used by 'db' service
    name: simple-postgres-data # Explicit name for the volume

# Rede para comunicação entre os containers
networks:
  simple-network:
    name: simple-network
    driver: bridge
